# Default values for checkpoint-restore.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# webhooktest:
#   name: webhooktest
#   namespace: docker-registry
#   ports: 
#     - protocol: TCP
#       port: 8080
#       targetPort: 8080
#   image: 
#     repository: tonyliu666/testwebhook
#     tag: latest


# registry:
#   secret:
#     name: regcred
#   pushSecret:
#     name: registry-secret
#     namespace: docker-registry
#     data:
#       - name: myuser
#         value: bXl1c2Vy
#       - name: mypassword
#         value: bXlwYXNzd29yZA==


#   namespace: docker-registry
#   replicas: 1
#   image: 
#     repository: registry
#     tag: latest
#   ports: 
#     - hostPort: 30010
#       protocol: TCP
      
#   volumeMounts: 
#     - registryName: registry-data
#       registryMountPath: /var/lib/registry
#     - configName: config-volume
#       configMountPath: /etc/docker/registry
#   env: 
#     - name: REGISTRY_HTTP_SECRET
#       value: myuser:$2y$05$SC5AAIwwjc54t4h4XQEFXey5a5xEkdH6sR7SiwzSTRqvVpa6R2HbW
#   webhookservice:
#     - url: http://webhooktest:8080/webhook
#       timeout: 5s
#       threshold: 5
#       backoff: 1s
#       events: 
#         - push

# restore: 
#   - namespace: restore 
#     image: 
#       repository: tonyliu666/restore
#       tag: latest

strimziKafka: 
  - kafka: 
      version: "3.7.0"
      replicas: "3"
  - zookeeper: 
      replicas: "3"


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
